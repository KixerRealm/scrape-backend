// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: blog_posts.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createBlogPost = `-- name: CreateBlogPost :one
insert into blog_posts (id, created_at, updated_at, title, description, user_id)
values ($1, $2, $3, $4, $5, $6)
returning id, created_at, updated_at, title, description, user_id
`

type CreateBlogPostParams struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       string
	Description string
	UserID      uuid.UUID
}

func (q *Queries) CreateBlogPost(ctx context.Context, arg CreateBlogPostParams) (BlogPost, error) {
	row := q.db.QueryRowContext(ctx, createBlogPost,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Description,
		arg.UserID,
	)
	var i BlogPost
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.UserID,
	)
	return i, err
}

const createBlogPostFile = `-- name: CreateBlogPostFile :one
insert into blog_post_files (blog_post_id, file_id)
values ($1, $2)
returning blog_post_id, file_id
`

type CreateBlogPostFileParams struct {
	BlogPostID uuid.UUID
	FileID     uuid.UUID
}

func (q *Queries) CreateBlogPostFile(ctx context.Context, arg CreateBlogPostFileParams) (BlogPostFile, error) {
	row := q.db.QueryRowContext(ctx, createBlogPostFile, arg.BlogPostID, arg.FileID)
	var i BlogPostFile
	err := row.Scan(&i.BlogPostID, &i.FileID)
	return i, err
}

const getBlogPosts = `-- name: GetBlogPosts :many
select
    blog_posts.id as blog_post_id,
    blog_posts.created_at as blog_post_created_at,
    blog_posts.updated_at as blog_post_updated_at,
    blog_posts.title as blog_post_title,
    blog_posts.description as blog_post_description,
    files.id as file_id,
    files.file_name,
    files.folder_name
from
    blog_posts
        join
    blog_post_files on blog_posts.id = blog_post_files.blog_post_id
        join
    files on blog_post_files.file_id = files.id
`

type GetBlogPostsRow struct {
	BlogPostID          uuid.UUID
	BlogPostCreatedAt   time.Time
	BlogPostUpdatedAt   time.Time
	BlogPostTitle       string
	BlogPostDescription string
	FileID              uuid.UUID
	FileName            string
	FolderName          string
}

func (q *Queries) GetBlogPosts(ctx context.Context) ([]GetBlogPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getBlogPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBlogPostsRow
	for rows.Next() {
		var i GetBlogPostsRow
		if err := rows.Scan(
			&i.BlogPostID,
			&i.BlogPostCreatedAt,
			&i.BlogPostUpdatedAt,
			&i.BlogPostTitle,
			&i.BlogPostDescription,
			&i.FileID,
			&i.FileName,
			&i.FolderName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBlogPostsByCreatedAt = `-- name: GetBlogPostsByCreatedAt :many
with WeeklyAggregation as (
    select
        extract(week from created_at) as week_number,
        extract(year from created_at) as year,
        count(*) as post_count
    from
        blog_posts
    group by
        week_number, year
)

select
    bp.id, bp.created_at, bp.updated_at, bp.title, bp.description, bp.user_id,
    wa.week_number,
    wa.year,
    wa.post_count
from
    blog_posts bp
        join
    WeeklyAggregation wa on extract(week from bp.created_at) = wa.week_number and extract(year from bp.created_at) = wa.year
order by
    wa.week_number
`

type GetBlogPostsByCreatedAtRow struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       string
	Description string
	UserID      uuid.UUID
	WeekNumber  string
	Year        string
	PostCount   int64
}

func (q *Queries) GetBlogPostsByCreatedAt(ctx context.Context) ([]GetBlogPostsByCreatedAtRow, error) {
	rows, err := q.db.QueryContext(ctx, getBlogPostsByCreatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBlogPostsByCreatedAtRow
	for rows.Next() {
		var i GetBlogPostsByCreatedAtRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
			&i.UserID,
			&i.WeekNumber,
			&i.Year,
			&i.PostCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBlogPostsByUserWithFiles = `-- name: GetBlogPostsByUserWithFiles :many
select
    blog_posts.id as blog_post_id,
    blog_posts.created_at as blog_post_created_at,
    blog_posts.updated_at as blog_post_updated_at,
    blog_posts.title as blog_post_title,
    blog_posts.description as blog_post_description,
    files.id as file_id,
    files.file_name,
    files.folder_name
from
    blog_posts
        join
    blog_post_files on blog_posts.id = blog_post_files.blog_post_id
        join
    files on blog_post_files.file_id = files.id
where
        blog_posts.user_id = $1
`

type GetBlogPostsByUserWithFilesRow struct {
	BlogPostID          uuid.UUID
	BlogPostCreatedAt   time.Time
	BlogPostUpdatedAt   time.Time
	BlogPostTitle       string
	BlogPostDescription string
	FileID              uuid.UUID
	FileName            string
	FolderName          string
}

func (q *Queries) GetBlogPostsByUserWithFiles(ctx context.Context, userID uuid.UUID) ([]GetBlogPostsByUserWithFilesRow, error) {
	rows, err := q.db.QueryContext(ctx, getBlogPostsByUserWithFiles, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBlogPostsByUserWithFilesRow
	for rows.Next() {
		var i GetBlogPostsByUserWithFilesRow
		if err := rows.Scan(
			&i.BlogPostID,
			&i.BlogPostCreatedAt,
			&i.BlogPostUpdatedAt,
			&i.BlogPostTitle,
			&i.BlogPostDescription,
			&i.FileID,
			&i.FileName,
			&i.FolderName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFilesByBlogPostID = `-- name: GetFilesByBlogPostID :many
select files.id, files.file_name, files.folder_name
from blog_post_files
join files on blog_post_files.file_id = files.id
where blog_post_files.blog_post_id = $1
`

func (q *Queries) GetFilesByBlogPostID(ctx context.Context, blogPostID uuid.UUID) ([]File, error) {
	rows, err := q.db.QueryContext(ctx, getFilesByBlogPostID, blogPostID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(&i.ID, &i.FileName, &i.FolderName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
