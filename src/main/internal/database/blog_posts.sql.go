// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: blog_posts.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createBlogPost = `-- name: CreateBlogPost :one
INSERT INTO blog_posts (id, created_at, updated_at, title, description, image_filename, user_id)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, created_at, updated_at, title, description, image_filename, user_id
`

type CreateBlogPostParams struct {
	ID            uuid.UUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
	Title         string
	Description   sql.NullString
	ImageFilename sql.NullString
	UserID        uuid.UUID
}

func (q *Queries) CreateBlogPost(ctx context.Context, arg CreateBlogPostParams) (BlogPost, error) {
	row := q.db.QueryRowContext(ctx, createBlogPost,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Description,
		arg.ImageFilename,
		arg.UserID,
	)
	var i BlogPost
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.ImageFilename,
		&i.UserID,
	)
	return i, err
}

const getBlogPosts = `-- name: GetBlogPosts :many
SELECT id, created_at, updated_at, title, description, image_filename, user_id FROM blog_posts
`

func (q *Queries) GetBlogPosts(ctx context.Context) ([]BlogPost, error) {
	rows, err := q.db.QueryContext(ctx, getBlogPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BlogPost
	for rows.Next() {
		var i BlogPost
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
			&i.ImageFilename,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
