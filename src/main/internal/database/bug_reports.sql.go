// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: bug_reports.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createBugReport = `-- name: CreateBugReport :one
INSERT INTO bug_reports (id, created_at, updated_at, title, description, user_id)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, title, description, user_id
`

type CreateBugReportParams struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       string
	Description string
	UserID      uuid.UUID
}

func (q *Queries) CreateBugReport(ctx context.Context, arg CreateBugReportParams) (BugReport, error) {
	row := q.db.QueryRowContext(ctx, createBugReport,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Description,
		arg.UserID,
	)
	var i BugReport
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.UserID,
	)
	return i, err
}

const createBugReportFile = `-- name: CreateBugReportFile :one
insert into bug_report_files (bug_report_id, file_id)
values ($1, $2)
returning bug_report_id, file_id
`

type CreateBugReportFileParams struct {
	BugReportID uuid.UUID
	FileID      uuid.UUID
}

func (q *Queries) CreateBugReportFile(ctx context.Context, arg CreateBugReportFileParams) (BugReportFile, error) {
	row := q.db.QueryRowContext(ctx, createBugReportFile, arg.BugReportID, arg.FileID)
	var i BugReportFile
	err := row.Scan(&i.BugReportID, &i.FileID)
	return i, err
}

const getBugReports = `-- name: GetBugReports :many
select
    bug_reports.id as bug_report_id,
    bug_reports.created_at as bug_report_created_at,
    bug_reports.updated_at as bug_report_updated_at,
    bug_reports.title as bug_report_title,
    bug_reports.description as bug_report_description,
    files.id as file_id,
    files.file_name,
    files.folder_name
from
    bug_reports
        join
    bug_report_files on bug_reports.id = bug_report_files.bug_report_id
        join
    files on bug_report_files.file_id = files.id
`

type GetBugReportsRow struct {
	BugReportID          uuid.UUID
	BugReportCreatedAt   time.Time
	BugReportUpdatedAt   time.Time
	BugReportTitle       string
	BugReportDescription string
	FileID               uuid.UUID
	FileName             string
	FolderName           string
}

func (q *Queries) GetBugReports(ctx context.Context) ([]GetBugReportsRow, error) {
	rows, err := q.db.QueryContext(ctx, getBugReports)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBugReportsRow
	for rows.Next() {
		var i GetBugReportsRow
		if err := rows.Scan(
			&i.BugReportID,
			&i.BugReportCreatedAt,
			&i.BugReportUpdatedAt,
			&i.BugReportTitle,
			&i.BugReportDescription,
			&i.FileID,
			&i.FileName,
			&i.FolderName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBugReportsByUserWithFiles = `-- name: GetBugReportsByUserWithFiles :many
select
    bug_reports.id as bug_report_id,
    bug_reports.created_at as bug_report_created_at,
    bug_reports.updated_at as bug_report_updated_at,
    bug_reports.title as bug_report_title,
    bug_reports.description as bug_report_description,
    files.id as file_id,
    files.file_name,
    files.folder_name
from
    bug_reports
        join
    bug_report_files on bug_reports.id = bug_report_files.bug_report_id
        join
    files on bug_report_files.file_id = files.id
where
        bug_reports.user_id = $1
`

type GetBugReportsByUserWithFilesRow struct {
	BugReportID          uuid.UUID
	BugReportCreatedAt   time.Time
	BugReportUpdatedAt   time.Time
	BugReportTitle       string
	BugReportDescription string
	FileID               uuid.UUID
	FileName             string
	FolderName           string
}

func (q *Queries) GetBugReportsByUserWithFiles(ctx context.Context, userID uuid.UUID) ([]GetBugReportsByUserWithFilesRow, error) {
	rows, err := q.db.QueryContext(ctx, getBugReportsByUserWithFiles, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBugReportsByUserWithFilesRow
	for rows.Next() {
		var i GetBugReportsByUserWithFilesRow
		if err := rows.Scan(
			&i.BugReportID,
			&i.BugReportCreatedAt,
			&i.BugReportUpdatedAt,
			&i.BugReportTitle,
			&i.BugReportDescription,
			&i.FileID,
			&i.FileName,
			&i.FolderName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
