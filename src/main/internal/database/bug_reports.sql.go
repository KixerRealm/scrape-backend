// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: bug_reports.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createBugReport = `-- name: CreateBugReport :one
INSERT INTO bug_reports (id, created_at, updated_at, title, description, image_filename, user_id)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, created_at, updated_at, title, description, image_filename, user_id
`

type CreateBugReportParams struct {
	ID            uuid.UUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
	Title         string
	Description   string
	ImageFilename string
	UserID        uuid.UUID
}

func (q *Queries) CreateBugReport(ctx context.Context, arg CreateBugReportParams) (BugReport, error) {
	row := q.db.QueryRowContext(ctx, createBugReport,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Description,
		arg.ImageFilename,
		arg.UserID,
	)
	var i BugReport
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.ImageFilename,
		&i.UserID,
	)
	return i, err
}

const getBugReports = `-- name: GetBugReports :many
SELECT id, created_at, updated_at, title, description, image_filename, user_id FROM bug_reports
`

func (q *Queries) GetBugReports(ctx context.Context) ([]BugReport, error) {
	rows, err := q.db.QueryContext(ctx, getBugReports)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BugReport
	for rows.Next() {
		var i BugReport
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
			&i.ImageFilename,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBugReportsByUser = `-- name: GetBugReportsByUser :many
select id, created_at, updated_at, title, description, image_filename, user_id from bug_reports where user_id = $1
`

func (q *Queries) GetBugReportsByUser(ctx context.Context, userID uuid.UUID) ([]BugReport, error) {
	rows, err := q.db.QueryContext(ctx, getBugReportsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BugReport
	for rows.Next() {
		var i BugReport
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
			&i.ImageFilename,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
